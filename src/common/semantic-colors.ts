import chroma from "https://esm.sh/chroma-js@2.4.2";

export function semantic_colors(colors: Record<string, chroma.Color>) {
  return {
    // standard
    namespace: colors.syntaxViolet.hex(),
    class: colors.syntaxOrange.hex(),
    enum: colors.syntaxOrange.hex(),
    interface: colors.syntaxMagenta.hex(),
    struct: colors.syntaxOrange.hex(),
    typeParameter: colors.syntaxYellow.hex(),
    type: colors.syntaxOrange.hex(),
    parameter: colors.syntaxYellow.hex(),
    variable: colors.syntaxYellow.hex(),
    property: colors.syntaxYellow.hex(),
    enumMember: colors.syntaxYellow.hex(),
    decorator: colors.syntaxPurple.hex(),
    event: colors.syntaxCyan.hex(),
    function: colors.syntaxCyan.hex(),
    method: colors.syntaxCyan.hex(),
    macro: colors.syntaxCyan.hex(),
    label: colors.syntaxPurple.hex(),
    comment: colors.comment.hex(),
    string: colors.syntaxGreen.hex(),
    keyword: colors.syntaxBlue.hex(),
    number: colors.syntaxTeal.hex(),
    regexp: colors.syntaxLemon.hex(),
    operator: colors.syntaxRed.hex(),

    // "variable:ts": colors.syntaxYellow.hex(),
    // "parameter:ts": colors.syntaxYellow.hex(),
    // "type:ts": colors.syntaxOrange.hex(),
    // "function:ts": colors.syntaxCyan.hex(),
    // "function.declaration": {
    //   fontStyle: "bold",
    // },
    // "method:ts": colors.syntaxCyan.hex(),
    // "class:ts": colors.syntaxCyan.hex(),
    // "property:ts": colors.syntaxYellow.hex(),
    // "string:ts": colors.syntaxGreen.hex(),
    // "number:ts": colors.syntaxTeal.hex(),
    // "regexp:ts": colors.syntaxLemon.hex(),
    // "comment:ts": colors.comment.hex(),
    // "keyword:ts": colors.syntaxBlue.hex(),
    // "interface:ts": colors.syntaxMagenta.hex(),

    // For rust-analyzer
    "attribute:rust": colors.syntaxCyan.hex(),
    "enum:rust": colors.syntaxOrange.hex(),
    "function:rust": {
      "foreground": colors.syntaxCyan.hex(),
      "italic": false,
    },
    "function.unsafe:rust": colors.danger.hex(),
    "derive:rust": colors.syntaxMagenta.hex(),
    "macro:rust": colors.syntaxCyan.hex(),
    "method:rust": {
      "foreground": colors.syntaxCyan.hex(),
      "italic": false,
    },
    "method.unsafe:rust": colors.danger.hex(),
    "namespace:rust": colors.syntaxViolet.hex(),
    "namespace.crateRoot:rust": {
      "bold": true,
    },
    "struct:rust": colors.syntaxOrange.hex(),
    "trait:rust": colors.syntaxMagenta.hex(),
    "interface:rust": colors.syntaxMagenta.hex(),
    "typeAlias:rust": colors.syntaxOrange.hex(),
    "union:rust": colors.syntaxOrange.hex(),
    "boolean:rust": {
      "foreground": colors.syntaxTeal.hex(),
      "italic": false,
    },
    "number:rust": colors.syntaxTeal.hex(),
    "string:rust": colors.syntaxGreen.hex(),
    "character:rust": colors.syntaxGreen.hex(),
    "escapeSequence:rust": colors.syntaxRed.hex(),
    "formatSpecifier:rust": colors.syntaxRed.hex(),
    "operator:rust": colors.syntaxRed.hex(),
    "arithmetic:rust": colors.syntaxRed.hex(),
    "bitwise:rust": colors.syntaxRed.hex(),
    "comparison:rust": colors.syntaxRed.hex(),
    "logical:rust": colors.syntaxRed.hex(),
    "operator.controlFlow:rust": colors.syntaxRed.hex(),
    "punctuation:rust": colors.text.hex(),
    "attributeBracket:rust": colors.syntaxRed.hex(),
    "angle:rust": colors.syntaxRed.hex(),
    "brace:rust": colors.text.hex(),
    "bracket:rust": colors.text.hex(),
    "parenthesis:rust": colors.text.hex(),
    "colon:rust": colors.syntaxRed.hex(),
    "comma:rust": colors.text.hex(),
    "dot:rust": colors.text.hex(),
    "semicolon:rust": colors.text.hex(),
    "macroBang:rust": colors.text.hex(),
    "builtinAttribute:rust": colors.syntaxCyan.hex(),
    "builtinType:rust": colors.syntaxOrange.hex(),
    "comment:rust": colors.comment.hex(),
    "*.injected": {
      "italic": false,
    },
    "constParameter:rust": {
      "foreground": colors.syntaxYellow.hex(),
      "bold": true,
    },
    "enumMember:rust": colors.syntaxYellow.hex(),
    "generic:rust": colors.text.hex(),
    "keyword:rust": {
      "foreground": colors.syntaxBlue.hex(),
      "italic": true,
    },
    "keyword.controlFlow:rust": {
      "foreground": colors.syntaxRed.hex(),
      "italic": false,
    },
    "keyword.async:rust": colors.syntaxGrass.hex(),
    "keyword.unsafe:rust": colors.danger.hex(),
    "label:rust": colors.syntaxPurple.hex(),
    "lifetime:rust": colors.syntaxPurple.hex(),
    "parameter:rust": colors.syntaxYellow.hex(),
    "property:rust": colors.syntaxYellow.hex(),
    "selfKeyword:rust": {
      "foreground": colors.syntaxYellow.hex(),
      "bold": true,
      "italic": false,
    },
    "selfTypeKeyword:rust": {
      "foreground": colors.syntaxOrange.hex(),
      "bold": true,
      "italic": false,
    },
    "typeParameter:rust": {
      "foreground": colors.syntaxOrange.hex(),
      "bold": true,
    },
    "variable:rust": colors.syntaxYellow.hex(),
    "variable.mutable:rust": {
      "underline": true,
    },
    "variable.constant:rust": {
      "bold": true,
    },
    "variable.static:rust": {
      "bold": true,
    },
    "variable.static.mutable:rust": {
      "foreground": colors.danger.hex(),
      "underline": true,
      "bold": true,
    },
    "variable.callable:rust": colors.syntaxCyan.hex(),

    "unresolvedReference:rust": colors.white.hex(),
  };
}
